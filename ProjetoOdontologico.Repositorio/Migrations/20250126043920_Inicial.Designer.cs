// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ProjetoOdontologico.Repositorio.Migrations
{
    [DbContext(typeof(ProjetoOdontologicoContexto))]
    [Migration("20250126043920_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgendamentoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2")
                        .HasColumnName("DataHora");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("PacienteID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Agendamentos", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.ContaReceber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContaReceberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("DataVencimento");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("PacienteID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Status");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.Property<decimal>("ValorReceber")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorReceber");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ContasReceber", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EspecialidadeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nome");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FormaPagamentoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NomeForma");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("FormasPagamento", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.MovimentacaoFinanceira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovimentacaoFinanceiraID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DataMovimentacao");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Descricao");

                    b.Property<int>("FormaPagamentoId")
                        .HasColumnType("int")
                        .HasColumnName("FormaPagamentoID");

                    b.Property<string>("TipoMovimento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TipoMovimento");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("MovimentacoesFinanceiras", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Orcamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrcamentoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DataCriacao");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("PacienteID");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Total");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Orcamentos", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.OrcamentoProcedimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrcamentoProcedimentoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Descricao");

                    b.Property<int>("OrcamentoId")
                        .HasColumnType("int")
                        .HasColumnName("OrcamentoID");

                    b.Property<int>("ProcedimentoId")
                        .HasColumnType("int")
                        .HasColumnName("ProcedimentoID");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.HasIndex("ProcedimentoId");

                    b.ToTable("OrcamentoProcedimentos", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PacienteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("CPF");

                    b.Property<DateTime?>("DataNascimento")
                        .IsRequired()
                        .HasColumnType("DATE")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Endereco");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Genero");

                    b.Property<string>("HistoricoMedico")
                        .HasColumnType("TEXT")
                        .HasColumnName("HistoricoMedico");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Telefone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Procedimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProcedimentoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int")
                        .HasColumnName("EspecialidadeID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nome");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Procedimentos", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Agendamento", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Paciente", "Paciente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Agendamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.ContaReceber", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Paciente", "Paciente")
                        .WithMany("ContasReceber")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("ContasReceber")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Especialidade", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Especialidades")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("FormasPagamento")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.MovimentacaoFinanceira", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.FormaPagamento", "FormaPagamento")
                        .WithMany("MovimentacoesFinanceiras")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("MovimentacoesFinanceiras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FormaPagamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Orcamento", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Paciente", "Paciente")
                        .WithMany("Orcamentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Orcamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.OrcamentoProcedimento", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Orcamento", "Orcamento")
                        .WithMany("OrcamentosProcedimentos")
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Procedimento", "Procedimento")
                        .WithMany("OrcamentosProcedimentos")
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Orcamento");

                    b.Navigation("Procedimento");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Paciente", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Pacientes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Procedimento", b =>
                {
                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Especialidade", "Especialidade")
                        .WithMany("Procedimentos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetoOdontologico.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Procedimentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Especialidade", b =>
                {
                    b.Navigation("Procedimentos");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.FormaPagamento", b =>
                {
                    b.Navigation("MovimentacoesFinanceiras");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Orcamento", b =>
                {
                    b.Navigation("OrcamentosProcedimentos");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Paciente", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("ContasReceber");

                    b.Navigation("Orcamentos");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Procedimento", b =>
                {
                    b.Navigation("OrcamentosProcedimentos");
                });

            modelBuilder.Entity("ProjetoOdontologico.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("ContasReceber");

                    b.Navigation("Especialidades");

                    b.Navigation("FormasPagamento");

                    b.Navigation("MovimentacoesFinanceiras");

                    b.Navigation("Orcamentos");

                    b.Navigation("Pacientes");

                    b.Navigation("Procedimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
